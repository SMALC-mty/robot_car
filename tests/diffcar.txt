#include <Arduino.h>

// Differential drive mix/unmix functions
inline void diffMix(float t, float s, float &L, float &R) {
  L = max(t, s);
  R = t - s;
}
inline void diffUnmix(float L, float R, float &t, float &s) {
  if (R >= 0) {
    t = L;
    s = L - R;
  } else {
    s = L;
    t = L + R;
  }
}

class DiffCar {
public:
  // Constructor: supply pins in order ENA, IN1, IN2, ENB, IN3, IN4
  DiffCar(uint8_t ena, uint8_t in1, uint8_t in2,
          uint8_t enb, uint8_t in3, uint8_t in4) {
    // store pin numbers
    _ENA  = ena;
    _IN1  = in1;
    _IN2  = in2;
    _ENB  = enb;
    _IN3  = in3;
    _IN4  = in4;
    // default wheel speeds
    _left  = 0.0;
    _right = 0.0;
    // configure pins
    pinMode(_ENA, OUTPUT);
    pinMode(_IN1, OUTPUT);
    pinMode(_IN2, OUTPUT);
    pinMode(_ENB, OUTPUT);
    pinMode(_IN3, OUTPUT);
    pinMode(_IN4, OUTPUT);
    // apply initial stop
    _applyLR();
  }

  // Left wheel property
  void   setLeft(float L)    { _left  = constrain(L, -1.0, 1.0); _applyLR(); }
  float  getLeft() const     { return _left; }

  // Right wheel property
  void   setRight(float R)   { _right = constrain(R, -1.0, 1.0); _applyLR(); }
  float  getRight() const    { return _right; }

  // Throttle property (calculates on the fly)
  void   setThrottle(float t) {
    t = constrain(t, -1.0, 1.0);
    float s = getSteering();
    diffMix(t, s, _left, _right);
    _applyLR();
  }
  float  getThrottle() const {
    float t, s;
    diffUnmix(_left, _right, t, s);
    return t;
  }

  // Steering property (calculates on the fly)
  void   setSteering(float s) {
    s = constrain(s, -1.0, 1.0);
    float t = getThrottle();
    diffMix(t, s, _left, _right);
    _applyLR();
  }
  float  getSteering() const {
    float t, s;
    diffUnmix(_left, _right, t, s);
    return s;
  }

private:
  // Pins (now non-const so we can assign in the body)
  uint8_t _ENA, _IN1, _IN2, _ENB, _IN3, _IN4;
  // Stored wheel speeds
  float   _left, _right;

  // Apply stored _left/_right to hardware
  void _applyLR() {
    _driveMotor(_ENA, _IN1, _IN2, _left);
    _driveMotor(_ENB, _IN3, _IN4, _right);
  }

  // Drive a single motor: v in [-1..+1]
  static void _driveMotor(uint8_t pwmPin, uint8_t inA, uint8_t inB, float v) {
    int duty = (int)(abs(v) * 255);
    digitalWrite(inA, v >= 0 ? HIGH : LOW);
    digitalWrite(inB, v <= 0 ? HIGH : LOW);
    analogWrite(pwmPin, duty);
  }
};
